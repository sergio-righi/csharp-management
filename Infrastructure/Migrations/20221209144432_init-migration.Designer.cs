// <auto-generated />
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using System.ComponentModel.DataAnnotations.Schema;
using Tool.Utilities;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20221209144432_init-migration")]
    partial class initmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("Domain.Entity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CityId")
                        .HasColumnName("CityId");

                    b.Property<string>("Complement")
                        .HasColumnName("Complement")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Neighborhood")
                        .HasColumnName("Neighborhood")
                        .HasMaxLength(100);

                    b.Property<int?>("Number")
                        .IsRequired()
                        .HasColumnName("Number");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnName("Street")
                        .HasMaxLength(150);

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnName("Zipcode")
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Domain.Entity.Agenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId")
                        .HasColumnName("AddressId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime>("Date")
                        .HasColumnName("Date");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("EndTime")
                        .HasColumnName("EndTime");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("StartTime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Agenda");
                });

            modelBuilder.Entity("Domain.Entity.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("Date")
                        .HasColumnName("Date");

                    b.Property<int?>("FileId")
                        .HasColumnName("FileId");

                    b.Property<string>("Observation")
                        .HasColumnName("Observation");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("Domain.Entity.AttendanceTimetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttendanceId")
                        .HasColumnName("AttendanceId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<float>("Percentage")
                        .HasColumnName("Percentage");

                    b.Property<int>("SituationId")
                        .HasColumnName("SituationId");

                    b.Property<int>("TimetableId")
                        .HasColumnName("TimetableId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("TimetableId");

                    b.ToTable("AttendanceTimetable");
                });

            modelBuilder.Entity("Domain.Entity.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BillId")
                        .HasColumnName("BillId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("CurrencyId");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("DueDate")
                        .IsRequired()
                        .HasColumnName("DueDate");

                    b.Property<int?>("InstallmentCount")
                        .IsRequired()
                        .HasColumnName("InstallmentCount");

                    b.Property<int?>("InstallmentId");

                    b.Property<float?>("InterestRate")
                        .HasColumnName("InterestRate");

                    b.Property<decimal?>("InterestValue")
                        .HasColumnName("InterestValue");

                    b.Property<bool>("IsPaid")
                        .HasColumnName("IsPaid");

                    b.Property<DateTime?>("LimitDate")
                        .HasColumnName("LimitDate");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnName("PaymentDate");

                    b.Property<int?>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<int?>("ReceiptId")
                        .HasColumnName("ReceiptId");

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<decimal?>("Value")
                        .IsRequired()
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("BillId")
                        .IsUnique();

                    b.HasIndex("InstallmentId")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.HasIndex("ReceiptId")
                        .IsUnique();

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("Domain.Entity.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountryId")
                        .HasColumnName("CountryId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("IsActivated")
                        .HasColumnName("IsActivated");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(150);

                    b.Property<string>("PhoneCode")
                        .HasColumnName("PhoneCode");

                    b.Property<int?>("StateId")
                        .HasColumnName("StateId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Domain.Entity.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation")
                        .HasColumnName("Abbreviation")
                        .HasMaxLength(3);

                    b.Property<string>("Code")
                        .HasColumnName("Code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("IsActivated")
                        .HasColumnName("IsActivated");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(150);

                    b.Property<string>("PhoneCode")
                        .HasColumnName("PhoneCode");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Domain.Entity.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnName("ConfirmationDate");

                    b.Property<string>("ConfirmationToken")
                        .HasColumnName("ConfirmationToken")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("Domain.Entity.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnName("Date");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(255);

                    b.Property<int>("ExamId")
                        .HasColumnName("ExamId");

                    b.Property<int?>("FileId")
                        .HasColumnName("FileId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("PersonId");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("Domain.Entity.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnName("Date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasMaxLength(255);

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<int?>("ReceiptId")
                        .HasColumnName("ReceiptId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<decimal?>("Value")
                        .IsRequired()
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("Domain.Entity.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Extension")
                        .HasColumnName("Extension")
                        .HasMaxLength(5);

                    b.Property<int>("ExtensionId")
                        .HasColumnName("ExtensionId");

                    b.Property<string>("GeneratedName")
                        .HasColumnName("GeneratedName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActivated")
                        .HasColumnName("IsActivated");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Key")
                        .HasColumnName("Key")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(150);

                    b.Property<long>("Size")
                        .HasColumnName("Size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("File");
                });

            modelBuilder.Entity("Domain.Entity.FileFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<int>("FileId")
                        .HasColumnName("FileId");

                    b.Property<int>("FolderId")
                        .HasColumnName("FolderId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("FolderId");

                    b.ToTable("FileFolder");
                });

            modelBuilder.Entity("Domain.Entity.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<int?>("FolderId")
                        .HasColumnName("FolderId");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(150);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Folder");
                });

            modelBuilder.Entity("Domain.Entity.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActivated")
                        .HasColumnName("IsActivated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(150);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Domain.Entity.Installment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Installment");
                });

            modelBuilder.Entity("Domain.Entity.InstallmentInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ConfirmationDate")
                        .HasColumnName("ConfirmationDate");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("Date")
                        .HasColumnName("Date");

                    b.Property<int>("InstallmentId")
                        .HasColumnName("InstallmentId");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnName("IsConfirmed");

                    b.Property<int>("Number")
                        .HasColumnName("Number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("InstallmentId");

                    b.ToTable("InstallmentInfo");
                });

            modelBuilder.Entity("Domain.Entity.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActivated")
                        .HasColumnName("IsActivated");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<int?>("ItemId")
                        .HasColumnName("ItemId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(150);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Domain.Entity.JuridicalPerson", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("ActivityId")
                        .HasColumnName("ActivityId");

                    b.Property<int>("AreaId")
                        .HasColumnName("AreaId");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnName("CNPJ")
                        .HasMaxLength(14);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnName("CompanyName")
                        .HasMaxLength(150);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(250);

                    b.Property<string>("FantasyName")
                        .IsRequired()
                        .HasColumnName("FantasyName")
                        .HasMaxLength(150);

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.ToTable("JuridicalPerson");
                });

            modelBuilder.Entity("Domain.Entity.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Icon")
                        .HasColumnName("Icon")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActivated")
                        .HasColumnName("IsActivated");

                    b.Property<int?>("MenuId")
                        .HasColumnName("MenuId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(150);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Domain.Entity.NaturalPerson", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnName("Birthday");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("FullName")
                        .HasColumnName("FullName")
                        .HasMaxLength(150);

                    b.Property<int>("GenderId")
                        .HasColumnName("GenderId");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnName("GivenName")
                        .HasMaxLength(75);

                    b.Property<string>("SocialName")
                        .HasColumnName("SocialName")
                        .HasMaxLength(150);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id")
                        .HasAnnotation("DatabaseGenerated", DatabaseGeneratedOption.None);

                    b.ToTable("NaturalPerson");
                });

            modelBuilder.Entity("Domain.Entity.Overtime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnName("ConfirmationDate");

                    b.Property<int?>("Count")
                        .IsRequired()
                        .HasColumnName("Count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnName("Date");

                    b.Property<decimal?>("Earning")
                        .IsRequired()
                        .HasColumnName("Earning");

                    b.Property<int?>("FileId")
                        .HasColumnName("FileId");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnName("IsConfirmed");

                    b.Property<bool>("IsPaid")
                        .HasColumnName("IsPaid");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnName("PaymentDate");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("PersonId");

                    b.ToTable("Overtime");
                });

            modelBuilder.Entity("Domain.Entity.Paycheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Bonus")
                        .HasColumnName("Bonus");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnName("ConfirmationDate");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<decimal?>("Deduction")
                        .HasColumnName("Deduction");

                    b.Property<int?>("FileId")
                        .HasColumnName("FileId");

                    b.Property<decimal?>("GrossEarning")
                        .IsRequired()
                        .HasColumnName("GrossEarning");

                    b.Property<decimal?>("HourRate")
                        .IsRequired()
                        .HasColumnName("HourRate");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnName("IsConfirmed");

                    b.Property<bool>("IsExtra")
                        .HasColumnName("IsExtra");

                    b.Property<string>("Observation")
                        .HasColumnName("Observation");

                    b.Property<int?>("OvertimeCount")
                        .IsRequired()
                        .HasColumnName("OvertimeCount");

                    b.Property<decimal?>("OvertimeValue")
                        .IsRequired()
                        .HasColumnName("OvertimeValue");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnName("PaymentDate");

                    b.Property<int>("PayrollId")
                        .HasColumnName("PayrollId");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<int?>("RegularHour")
                        .IsRequired()
                        .HasColumnName("RegularHour");

                    b.Property<decimal?>("Tax")
                        .HasColumnName("Tax");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<int?>("Week");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("PayrollId");

                    b.HasIndex("PersonId");

                    b.ToTable("Paycheck");
                });

            modelBuilder.Entity("Domain.Entity.Payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<int>("Month")
                        .HasColumnName("Month");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<int?>("Year")
                        .IsRequired()
                        .HasColumnName("Year");

                    b.HasKey("Id");

                    b.ToTable("Payroll");
                });

            modelBuilder.Entity("Domain.Entity.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<int>("MenuId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Domain.Entity.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Add");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PermissionId");

                    b.Property<int?>("PersonId");

                    b.Property<bool>("Print");

                    b.Property<bool>("Read");

                    b.Property<int>("RoleId");

                    b.Property<bool>("Update");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("PersonId");

                    b.ToTable("PermissionGroup");
                });

            modelBuilder.Entity("Domain.Entity.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("IsActivated")
                        .HasColumnName("IsActivated");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Login")
                        .HasColumnName("Login")
                        .HasMaxLength(150);

                    b.Property<string>("Password")
                        .HasColumnName("Password")
                        .HasMaxLength(150);

                    b.Property<int?>("PhotoId")
                        .HasColumnName("PhotoId");

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique();

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Domain.Entity.PersonAgenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgendaId")
                        .HasColumnName("AgendaId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("AgendaId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAgenda");
                });

            modelBuilder.Entity("Domain.Entity.PersonDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountryId")
                        .HasColumnName("CountryId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<int>("DocumentId")
                        .HasColumnName("DocumentId");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnName("ExpiryDate");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnName("IssueDate");

                    b.Property<string>("Number")
                        .HasColumnName("Number")
                        .HasMaxLength(50);

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<int?>("StateId")
                        .HasColumnName("StateId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PersonId");

                    b.HasIndex("StateId");

                    b.ToTable("PersonDocument");
                });

            modelBuilder.Entity("Domain.Entity.PersonRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("EndDate");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<int>("RoleId")
                        .HasColumnName("RoleId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("StartDate");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonRole");
                });

            modelBuilder.Entity("Domain.Entity.PersonTimetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<int>("TimetableId")
                        .HasColumnName("TimetableId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TimetableId");

                    b.ToTable("PersonTimetable");
                });

            modelBuilder.Entity("Domain.Entity.PersonToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnName("ConfirmationDate");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnName("ExpiryDate");

                    b.Property<string>("IpAddress")
                        .HasColumnName("IpAddress");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<string>("Token")
                        .HasColumnName("Token");

                    b.Property<int>("TokenId")
                        .HasColumnName("TokenId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonToken");
                });

            modelBuilder.Entity("Domain.Entity.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnName("Number")
                        .HasMaxLength(14);

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("Domain.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CalculationId")
                        .HasColumnName("CalculationId");

                    b.Property<string>("Code")
                        .HasColumnName("Code")
                        .HasMaxLength(50);

                    b.Property<int>("ColorId")
                        .HasColumnName("ColorId");

                    b.Property<int?>("Count")
                        .HasColumnName("Count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(250);

                    b.Property<float?>("Height")
                        .HasColumnName("Height");

                    b.Property<bool>("IsActivated")
                        .HasColumnName("IsActivated");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("ItemId")
                        .HasColumnName("ItemId");

                    b.Property<int>("MaterialId")
                        .HasColumnName("MaterialId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(150);

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnName("PurchasePrice");

                    b.Property<decimal?>("RentPrice")
                        .HasColumnName("RentPrice");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnName("SalePrice");

                    b.Property<int>("ShapeId")
                        .HasColumnName("ShapeId");

                    b.Property<int>("SizeId")
                        .HasColumnName("SizeId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<float?>("Weight")
                        .HasColumnName("Weight");

                    b.Property<float?>("Width")
                        .HasColumnName("Width");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Domain.Entity.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<int>("ImageId")
                        .HasColumnName("ImageId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("Domain.Entity.Rent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId")
                        .HasColumnName("AddressId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId");

                    b.Property<decimal?>("DownPayment")
                        .HasColumnName("DownPayment");

                    b.Property<int>("EmployeeId")
                        .HasColumnName("EmployeeId");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnName("EndDate");

                    b.Property<int?>("InstallmentCount")
                        .IsRequired()
                        .HasColumnName("InstallmentCount");

                    b.Property<int?>("InstallmentId");

                    b.Property<float?>("InterestRate")
                        .HasColumnName("InterestRate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnName("PaymentMethodId");

                    b.Property<decimal?>("ShippingFee")
                        .HasColumnName("ShippingFee");

                    b.Property<int>("SituationId")
                        .HasColumnName("SituationId");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnName("StartDate");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InstallmentId")
                        .IsUnique();

                    b.ToTable("Rent");
                });

            modelBuilder.Entity("Domain.Entity.RentProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count")
                        .HasColumnName("Count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<int>("RentId")
                        .HasColumnName("RentId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<decimal?>("Value")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RentId");

                    b.ToTable("RentProduct");
                });

            modelBuilder.Entity("Domain.Entity.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId")
                        .IsRequired()
                        .HasColumnName("AddressId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnName("Date");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(255);

                    b.Property<decimal?>("DownPayment")
                        .HasColumnName("DownPayment");

                    b.Property<int?>("InstallmentCount")
                        .IsRequired()
                        .HasColumnName("InstallmentCount");

                    b.Property<int?>("InstallmentId");

                    b.Property<float?>("InterestRate")
                        .HasColumnName("InterestRate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnName("PaymentMethodId");

                    b.Property<int>("SellerId")
                        .HasColumnName("SellerId");

                    b.Property<decimal?>("ShippingFee")
                        .HasColumnName("ShippingFee");

                    b.Property<int>("SituationId")
                        .HasColumnName("SituationId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<int?>("VendorId")
                        .HasColumnName("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InstallmentId")
                        .IsUnique();

                    b.HasIndex("SellerId");

                    b.HasIndex("VendorId");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("Domain.Entity.SaleProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count")
                        .HasColumnName("Count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<float?>("Height")
                        .HasColumnName("Height");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<int>("SaleId")
                        .HasColumnName("SaleId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<decimal?>("Value")
                        .HasColumnName("Value");

                    b.Property<float?>("Weight")
                        .HasColumnName("Weight");

                    b.Property<float?>("Width")
                        .HasColumnName("Width");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleProduct");
                });

            modelBuilder.Entity("Domain.Entity.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation")
                        .HasColumnName("Abbreviation")
                        .HasMaxLength(2);

                    b.Property<int>("CountryId")
                        .HasColumnName("CountryId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("IsActivated")
                        .HasColumnName("IsActivated");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(150);

                    b.Property<string>("PhoneCode")
                        .HasColumnName("PhoneCode");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Domain.Entity.Subgroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(250);

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupId");

                    b.Property<bool>("IsActivated")
                        .HasColumnName("IsActivated");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(150);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Subgroup");
                });

            modelBuilder.Entity("Domain.Entity.Timetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("EndTime")
                        .HasColumnName("EndTime");

                    b.Property<bool>("IsActivated")
                        .HasColumnName("IsActivated");

                    b.Property<int>("ShiftId")
                        .HasColumnName("ShiftId");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("StartTime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<int>("Weekday")
                        .HasColumnName("Weekday");

                    b.HasKey("Id");

                    b.ToTable("Timetable");
                });

            modelBuilder.Entity("Domain.Entity.Vacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasColumnName("Amount");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnName("ConfirmationDate");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnName("EndDate");

                    b.Property<int?>("FileId")
                        .HasColumnName("FileId");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnName("IsConfirmed");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonId");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnName("StartDate");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("UpdatedAt");

                    b.Property<int>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("PersonId");

                    b.ToTable("Vacation");
                });

            modelBuilder.Entity("Domain.Entity.Address", b =>
                {
                    b.HasOne("Domain.Entity.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.Agenda", b =>
                {
                    b.HasOne("Domain.Entity.Address", "Address")
                        .WithMany("Agenda")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Person", "Customer")
                        .WithMany("Agenda")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.Attendance", b =>
                {
                    b.HasOne("Domain.Entity.File", "File")
                        .WithOne("Attendance")
                        .HasForeignKey("Domain.Entity.Attendance", "FileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("Attendances")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.AttendanceTimetable", b =>
                {
                    b.HasOne("Domain.Entity.Attendance", "Attendance")
                        .WithMany("AttendanceTimetable")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Timetable", "Timetable")
                        .WithMany("AttendanceTimetable")
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.Bill", b =>
                {
                    b.HasOne("Domain.Entity.File", "File")
                        .WithOne("Bill")
                        .HasForeignKey("Domain.Entity.Bill", "BillId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entity.Installment", "Installment")
                        .WithOne("Bill")
                        .HasForeignKey("Domain.Entity.Bill", "InstallmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("Bills")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.File", "Receipt")
                        .WithOne("Receipt")
                        .HasForeignKey("Domain.Entity.Bill", "ReceiptId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Domain.Entity.City", b =>
                {
                    b.HasOne("Domain.Entity.Country", "Country")
                        .WithMany("Citites")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.State", "State")
                        .WithMany("Citites")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.Email", b =>
                {
                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("Emails")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.Exam", b =>
                {
                    b.HasOne("Domain.Entity.File", "File")
                        .WithMany("Exams")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("Exams")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.Expense", b =>
                {
                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("Expenses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.File", "Receipt")
                        .WithMany("Expenses")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Domain.Entity.FileFolder", b =>
                {
                    b.HasOne("Domain.Entity.File", "File")
                        .WithMany("Folders")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entity.Folder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.Folder", b =>
                {
                    b.HasOne("Domain.Entity.Folder", "Parent")
                        .WithMany("Folders")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.InstallmentInfo", b =>
                {
                    b.HasOne("Domain.Entity.Installment", "Installment")
                        .WithMany("Dates")
                        .HasForeignKey("InstallmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.Item", b =>
                {
                    b.HasOne("Domain.Entity.Item", "Parent")
                        .WithMany("Items")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.JuridicalPerson", b =>
                {
                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithOne("JuridicalPerson")
                        .HasForeignKey("Domain.Entity.JuridicalPerson", "Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.Menu", b =>
                {
                    b.HasOne("Domain.Entity.Menu", "Parent")
                        .WithMany("Menus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.NaturalPerson", b =>
                {
                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithOne("NaturalPerson")
                        .HasForeignKey("Domain.Entity.NaturalPerson", "Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.Overtime", b =>
                {
                    b.HasOne("Domain.Entity.File", "File")
                        .WithMany("Overtimes")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("Overtimes")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.Paycheck", b =>
                {
                    b.HasOne("Domain.Entity.File", "File")
                        .WithMany("Paychecks")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Payroll", "Payroll")
                        .WithMany("Paychecks")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("Paychecks")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.Permission", b =>
                {
                    b.HasOne("Domain.Entity.Menu", "Menu")
                        .WithMany("Permissions")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.PermissionGroup", b =>
                {
                    b.HasOne("Domain.Entity.Permission", "Permission")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("PermissionGroups")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("Domain.Entity.Person", b =>
                {
                    b.HasOne("Domain.Entity.File", "Photo")
                        .WithOne("Person")
                        .HasForeignKey("Domain.Entity.Person", "PhotoId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Domain.Entity.PersonAgenda", b =>
                {
                    b.HasOne("Domain.Entity.Agenda", "Agenda")
                        .WithMany("PersonAgenda")
                        .HasForeignKey("AgendaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("PersonAgenda")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.PersonDocument", b =>
                {
                    b.HasOne("Domain.Entity.Country", "Country")
                        .WithMany("Documents")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("Documents")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.State", "State")
                        .WithMany("Documents")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.PersonRole", b =>
                {
                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("Roles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.PersonTimetable", b =>
                {
                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("PersonTimetable")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Timetable", "Timetable")
                        .WithMany("PersonTimetable")
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.PersonToken", b =>
                {
                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("Tokes")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.Phone", b =>
                {
                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("Phones")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.Product", b =>
                {
                    b.HasOne("Domain.Entity.Item", "Item")
                        .WithMany("Products")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.ProductImage", b =>
                {
                    b.HasOne("Domain.Entity.File", "Image")
                        .WithMany("Images")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entity.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.Rent", b =>
                {
                    b.HasOne("Domain.Entity.Address", "Address")
                        .WithMany("Rents")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Person", "Customer")
                        .WithMany("ClientRents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Person", "Employee")
                        .WithMany("EmployeeRents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Installment", "Installment")
                        .WithOne("Rent")
                        .HasForeignKey("Domain.Entity.Rent", "InstallmentId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Domain.Entity.RentProduct", b =>
                {
                    b.HasOne("Domain.Entity.Product", "Product")
                        .WithMany("RentProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Rent", "Rent")
                        .WithMany("Products")
                        .HasForeignKey("RentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.Sale", b =>
                {
                    b.HasOne("Domain.Entity.Address", "Address")
                        .WithMany("Sales")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Person", "Customer")
                        .WithMany("Purchases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Installment", "Installment")
                        .WithOne("Sale")
                        .HasForeignKey("Domain.Entity.Sale", "InstallmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entity.Person", "Seller")
                        .WithMany("Sales")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Person", "Vendor")
                        .WithMany("Providers")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.SaleProduct", b =>
                {
                    b.HasOne("Domain.Entity.Product", "Product")
                        .WithMany("SaleProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entity.Sale", "Sale")
                        .WithMany("Products")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.State", b =>
                {
                    b.HasOne("Domain.Entity.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.Subgroup", b =>
                {
                    b.HasOne("Domain.Entity.Group", "Group")
                        .WithMany("Subgroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Entity.Vacation", b =>
                {
                    b.HasOne("Domain.Entity.File", "File")
                        .WithMany("Vacations")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entity.Person", "Person")
                        .WithMany("Vacations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
