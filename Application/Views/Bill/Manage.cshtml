@model Domain.Entity.Bill
@{
    ViewBag.Title = Title.ManageBill;
}

<section id="section_header" class="section-header">

    <div class="title">@Title.ManageBill</div>

    <div class="toolbar">

        <a asp-controller="Bill" asp-action="Manage" asp-route-id="0" class="button button-add">

            @Button.New

        </a>

        @if (Model.Id.IsPositive())
        {
            <a asp-controller="Bill" asp-action="Delete" asp-route-id="@Model.Id" class="button button-delete">

                @Button.Delete

            </a>
        }

    </div>

    <ol class="breadcrumb">

        <li><a asp-controller="Home" asp-action="Index">@Title.Home</a></li>
        <li><a asp-controller="Bill" asp-action="Index">@Title.Bill</a></li>
        <li>@Title.ManageBill</li>

    </ol>

</section>

<section id="section_content" class="section-content">

    <div class="row">

        <div class="col col-12">

            <div id="message">

                @await Html.PartialAsync("~/Views/Shared/Feedback/_Message.cshtml")

            </div>

        </div>

        <div class="col col-12">

            @using (Html.BeginForm("Manage", "Bill", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(model => model.PaymentDate)
                @Html.HiddenFor(model => model.BillId, new { @id = "hidden_bill" })
                @Html.HiddenFor(model => model.PersonId, new { @id = "hidden_person" })
                @Html.HiddenFor(model => model.ReceiptId, new { @id = "hidden_receipt" })
                @Html.HiddenFor(model => model.InstallmentId, new { @id = "hidden_installment" })

                <div class="row">

                    <div class="col col-12">

                        <div class="form-group">

                            @Html.LabelFor(model => model.NotName, new { @class = "" })

                            <div class="input-group">

                                @Html.TextBoxFor(model => model.NotName, string.Empty, new { @data_reference = "hidden_person", @readonly = "readonly" })

                                <button type="button" class="button button-search button-plain" data-modal="#search_person">

                                    @Button.Search

                                </button>

                            </div>

                            <span>@Html.ValidationMessageFor(model => model.NotName)</span>

                        </div>

                    </div>

                    <div class="col col-12 col-sm-4">

                        <div class="form-group">

                            @Html.LabelFor(model => model.TypeId, new { @class = "required" })

                            @Html.DropDownListFor(model => model.TypeId, EBill.Other.GetSelectList<EBill>(), EStringGender.Male.GetSelectFormat(Label.Type), new { @required = "required" })

                            <span>@Html.ValidationMessageFor(model => model.TypeId)</span>

                        </div>

                    </div>

                    <div class="col col-12 col-sm-4">

                        <div class="form-group">

                            @Html.LabelFor(model => model.DueDate, new { @class = "required" })

                            @Html.TextBoxFor(model => model.DueDate, StringFormatHelper.Date, new { @id = "date_installment", @class = "m-datetime", @required = "required" })

                            <span>@Html.ValidationMessageFor(model => model.DueDate)</span>

                        </div>

                    </div>

                    <div class="col col-12 col-sm-4">

                        <div class="form-group">

                            @Html.LabelFor(model => model.LimitDate, new { @class = "" })

                            @Html.TextBoxFor(model => model.LimitDate, StringFormatHelper.Date, new { @class = "m-datetime" })

                            <span>@Html.ValidationMessageFor(model => model.LimitDate)</span>

                        </div>

                    </div>

                    <div class="col col-12">

                        <div class="form-group">

                            @Html.LabelFor(model => model.Description, new { @class = "required" })

                            @Html.TextAreaFor(model => model.Description, new { @required = "required" })

                            <span>@Html.ValidationMessageFor(model => model.Description)</span>

                        </div>

                    </div>

                    <div class="col col-12 col-sm-3">

                        <div class="form-group">

                            @Html.LabelFor(model => model.InstallmentCount, new { @class = "required" })

                            <div class="input-group">

                                @Html.TextBoxFor(model => model.InstallmentCount, new { @id = "quantity_installment", @required = "required" })

                                <button type="button" class="button button-config button-plain" data-modal="#config_installment" @(Model.Id.IsPositive() ? string.Empty : "disabled")>

                                    @Button.Config

                                </button>

                            </div>

                            <span>@Html.ValidationMessageFor(model => model.InstallmentCount)</span>

                        </div>

                    </div>

                    <div class="col col-12 col-sm-3">

                        <div class="form-group">

                            @Html.LabelFor(model => model.Value, new { @class = "required" })

                            <div class="input-group">

                                @Html.DropDownListFor(model => model.CurrencyId, ECurrency.BRL.GetSelectList<ECurrency>(), new { @class = "w-30", @required = "required" })

                                @Html.TextBoxFor(model => model.Value, new { @required = "required" })

                            </div>

                            <span>@Html.ValidationMessageFor(model => model.Value)</span>

                        </div>

                    </div>

                    <div class="col col-12 col-sm-3">

                        <div class="form-group">

                            @Html.LabelFor(model => model.InterestRate)

                            @Html.TextBoxFor(model => model.InterestRate, new { @class = "" })

                            <span>@Html.ValidationMessageFor(model => model.InterestRate)</span>

                        </div>

                    </div>

                    <div class="col col-12 col-sm-3">

                        <div class="form-group">

                            @Html.LabelFor(model => model.InterestValue)

                            @Html.TextBoxFor(model => model.InterestValue, new { @class = "" })

                            <span>@Html.ValidationMessageFor(model => model.InterestValue)</span>

                        </div>

                    </div>

                    <div class="col col-12 col-sm-6">

                        <div class="form-group">

                            @Html.LabelFor(model => model.NotBillName, new { @class = "" })

                            <div class="input-group">

                                @Html.TextBoxFor(model => model.NotBillName, string.Empty, new { @data_reference = "hidden_receipt", @readonly = "readonly" })

                                <button type="button" class="button button-search button-plain" data-modal="#search_file">

                                    @Button.Search

                                </button>

                            </div>

                            <span>@Html.ValidationMessageFor(model => model.NotBillName)</span>

                        </div>

                    </div>

                    <div class="col col-12 col-sm-6">

                        <div class="form-group">

                            @Html.LabelFor(model => model.NotReceiptName, new { @class = "" })

                            <div class="input-group">

                                @Html.TextBoxFor(model => model.NotReceiptName, string.Empty, new { @data_reference = "receipt_id", @readonly = "readonly" })

                                <button type="button" class="button button-search button-plain" data-modal="#search_file">

                                    @Button.Search

                                </button>

                            </div>

                            <span>@Html.ValidationMessageFor(model => model.NotReceiptName)</span>

                        </div>

                    </div>

                    <div class="col col-12">

                        <div class="form-group">

                            <div class="checkbox">

                                @Html.CheckBoxFor(model => model.IsPaid, new { @class = "" })

                                @Html.LabelFor(model => model.IsPaid, new { @class = "" })

                            </div>

                            <span>@Html.ValidationMessageFor(model => model.IsPaid)</span>

                        </div>

                    </div>

                    <div class="col col-12">

                        <div class="form-group">

                            @if (Model.Id.IsPositive())
                            {
                                <button type="submit" class="button button-save">@Button.Save</button>
                            }
                            else
                            {
                                <button type="submit" class="button button-add">@Button.Create</button>
                            }

                        </div>

                    </div>

                </div>
            }

        </div>

    </div>

    @{
        await Html.RenderPartialAsync("~/Views/Search/Person/_Person.cshtml");
    }

    @{
        await Html.RenderPartialAsync("~/Views/Config/Installment/_Installment.cshtml");
    }

    @{
        await Html.RenderPartialAsync("~/Views/Search/File/_File.cshtml");
    }

</section>

@section ScriptsHeader
{
    <environment include="Development">
        <script type="text/javascript" src="~/js/vanilla/element/list.js"></script>
        <script type="text/javascript" src="~/js/vanilla/component/mask.js"></script>
        <script type="text/javascript" src="~/js/vanilla/component/modal.js"></script>
    </environment>
    <environment exclude="Development">
        <script type="text/javascript" src="~/js/vanilla/element/list.min.js"></script>
        <script type="text/javascript" src="~/js/vanilla/component/mask.min.js"></script>
        <script type="text/javascript" src="~/js/vanilla/component/modal.min.js"></script>
    </environment>
}

@section ScriptsFooter
{
    <script type="text/javascript" src="~/js/jquery/jquery-3.4.1.min.js"></script>
    <script type="text/javascript" src="~/js/jquery/unobtrusive-ajax/jquery-unobtrusive-ajax.min.js"></script>
}