@model Domain.Entity.Product
@{
    ViewBag.Title = Title.ManageProduct;
}

<section id="section_header" class="section-header">

    <div class="title">@Title.ManageProduct</div>

    <div class="toolbar">

        <a asp-controller="Product" 
           asp-action="Manage" 
           asp-route-id="0" 
           asp-route-itemId="@Model.ItemId" class="button button-add">

            @Button.New

        </a>

        @if (Model.Id > 0)
        {
            <a asp-controller="Product" asp-action="Delete" asp-route-id="@Model.Id" class="button button-delete" data-dialog="#confirm_dialog">

                @Button.Delete

            </a>
        }

    </div>

    <ol class="breadcrumb">

        <li><a asp-controller="Home" asp-action="Index">@Title.Home</a></li>
        <li><a asp-controller="Item" asp-action="Index">@Title.Item</a></li>
        <li><a asp-controller="Product" asp-action="Index" asp-route-ReferenceId="@Model.ItemId">@Title.Product</a></li>
        <li>@Title.ManageProduct</li>

    </ol>

</section>

<section id="section_content" class="section-content">

    <div class="row">

        <div class="col col-12">

            @await Html.PartialAsync("~/Views/Shared/Feedback/_Message.cshtml")

        </div>

        <div class="col col-12">

            @using (Html.BeginForm("Manage", "Product", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(model => model.ItemId, new { @id = "hidden_item" })

            <div class="row">

                <div class="col col-12 col-sm-4">

                    <div class="form-group">

                        @Html.LabelFor(model => model.Name, new { @class = "required" })

                        @Html.TextBoxFor(model => model.Name, string.Empty, new { @autofocus = "autofocus", @required = "required" })

                        <span>@Html.ValidationMessageFor(model => model.Name)</span>

                    </div>

                </div>

                <div class="col col-12 col-sm-4">

                    <div class="form-group">

                        @Html.LabelFor(model => model.NotItemName, new { @class = "required" })

                        <div class="input-group">

                            @Html.TextBoxFor(model => model.NotItemName, string.Empty, new { @data_reference = "hidden_item", @required = "required", @readonly = "readonly" })

                            <button type="button" class="button button-search button-plain" data-modal="#search_item">

                                @Button.Search

                            </button>

                        </div>

                        <span>@Html.ValidationMessageFor(model => model.NotItemName)</span>

                    </div>

                </div>

                <div class="col col-12 col-sm-4">

                    <div class="form-group">

                        @Html.LabelFor(model => model.CalculationId, new { @class = "required" })

                        @Html.DropDownListFor(model => model.CalculationId, ECalculation.Unit.GetSelectList<ECalculation>(), EStringGender.Male.GetSelectFormat(Label.Unit), new { @required = "required" })

                        <span>@Html.ValidationMessageFor(model => model.CalculationId)</span>

                    </div>

                </div>

                <div class="col col-12">

                    <div class="form-group">

                        @Html.LabelFor(model => model.Description, new { @class = "required" })

                        @Html.TextAreaFor(model => model.Description, new { @required = "required" })

                        <span>@Html.ValidationMessageFor(model => model.Description)</span>

                    </div>

                </div>

                <div class="col col-12 col-sm-4">

                    <div class="form-group">

                        @Html.LabelFor(model => model.PurchasePrice, new { @class = "required" })

                        @Html.TextBoxFor(model => model.PurchasePrice, string.Empty, new { @class = "m-money", @required = "required" })

                        <span>@Html.ValidationMessageFor(model => model.PurchasePrice)</span>

                    </div>

                </div>

                <div class="col col-12 col-sm-4">

                    <div class="form-group">

                        @Html.LabelFor(model => model.RentPrice, new { @class = "" })

                        @Html.TextBoxFor(model => model.RentPrice, string.Empty, new { @class = "m-money" })

                        <span>@Html.ValidationMessageFor(model => model.RentPrice)</span>

                    </div>

                </div>

                <div class="col col-12 col-sm-4">

                    <div class="form-group">

                        @Html.LabelFor(model => model.SalePrice, new { @class = "" })

                        @Html.TextBoxFor(model => model.SalePrice, string.Empty, new { @class = "m-money" })

                        <span>@Html.ValidationMessageFor(model => model.SalePrice)</span>

                    </div>

                </div>

                <div class="col col-12 col-sm-6 col-md-3">

                    <div class="form-group">

                        @Html.LabelFor(model => model.Width, new { @class = "" })

                        @Html.TextBoxFor(model => model.Width, StringFormatHelper.Float, new { @class = "" })

                        <span>@Html.ValidationMessageFor(model => model.Width)</span>

                    </div>

                </div>

                <div class="col col-12 col-sm-6 col-md-3">

                    <div class="form-group">

                        @Html.LabelFor(model => model.Height, new { @class = "" })

                        @Html.TextBoxFor(model => model.Height, StringFormatHelper.Float, new { @class = "" })

                        <span>@Html.ValidationMessageFor(model => model.Height)</span>

                    </div>

                </div>

                <div class="col col-12 col-sm-6 col-md-3">

                    <div class="form-group">

                        @Html.LabelFor(model => model.Weight, new { @class = "" })

                        @Html.TextBoxFor(model => model.Weight, StringFormatHelper.Float, new { @class = "" })

                        <span>@Html.ValidationMessageFor(model => model.Weight)</span>

                    </div>

                </div>

                <div class="col col-12 col-sm-6 col-md-3">

                    <div class="form-group">

                        @Html.LabelFor(model => model.Count, new { @class = "required" })

                        @Html.TextBoxFor(model => model.Count, string.Empty, new { @required = "required" })

                        <span>@Html.ValidationMessageFor(model => model.Count)</span>

                    </div>

                </div>

                <div class="col col-12 col-sm-6 col-md-3">

                    <div class="form-group">

                        @Html.LabelFor(model => model.ColorId, new { @class = "" })

                        @Html.DropDownListFor(model => model.ColorId, EColor.None.GetSelectList<EColor>(), EStringGender.Female.GetSelectFormat(Label.Color), new { @class = "" })

                        <span>@Html.ValidationMessageFor(model => model.ColorId)</span>

                    </div>

                </div>

                <div class="col col-12 col-sm-6 col-md-3">

                    <div class="form-group">

                        @Html.LabelFor(model => model.SizeId, new { @class = "" })

                        @Html.DropDownListFor(model => model.SizeId, ESize.None.GetSelectList<ESize>(), EStringGender.Male.GetSelectFormat(Label.Size), new { @class = "" })

                        <span>@Html.ValidationMessageFor(model => model.SizeId)</span>

                    </div>

                </div>

                <div class="col col-12 col-sm-6 col-md-3">

                    <div class="form-group">

                        @Html.LabelFor(model => model.ShapeId, new { @class = "" })

                        @Html.DropDownListFor(model => model.ShapeId, EShape.None.GetSelectList<EShape>(), EStringGender.Male.GetSelectFormat(Label.Type), new { @class = "" })

                        <span>@Html.ValidationMessageFor(model => model.ShapeId)</span>

                    </div>

                </div>

                <div class="col col-12 col-sm-6 col-md-3">

                    <div class="form-group">

                        @Html.LabelFor(model => model.MaterialId, new { @class = "" })

                        @Html.DropDownListFor(model => model.MaterialId, EMaterial.None.GetSelectList<EMaterial>(), EStringGender.Male.GetSelectFormat(Label.Material), new { @class = "" })

                        <span>@Html.ValidationMessageFor(model => model.MaterialId)</span>

                    </div>

                </div>

                @*<div class="col col-12">

            <div class="form-group">

                <button type="button" class="button button-attach" data-modal="#search_file">

                    @Button.Attach

                </button>

                <a asp-controller="Drive" asp-action="Index" class="button button-upload">

                    @Button.Send

                </a>

            </div>

        </div>*@

                <div class="col col-12">

                    <div class="form-group">

                        <div class="checkbox">

                            @Html.CheckBoxFor(model => model.IsActivated, new { @required = "required" })

                            @Html.LabelFor(model => model.IsActivated, new { @class = "required" })

                        </div>

                        <span>@Html.ValidationMessageFor(model => model.IsActivated)</span>

                    </div>

                </div>

                <div class="col col-12">

                    <div class="form-group">

                        @if (Model.Id.IsPositive())
                        {
                            <button type="submit" class="button button-save">@Button.Save</button>
                        }
                        else
                        {
                            <button type="submit" class="button button-add">@Button.Create</button>
                        }

                    </div>

                </div>

            </div>
            }

        </div>

    </div>

    @{
        await Html.RenderPartialAsync("~/Views/Search/Item/_Item.cshtml");
    }

</section>

@section ScriptsHeader
{
    <environment include="Development">
        <script type="text/javascript" src="~/js/vanilla/element/list.js"></script>
        <script type="text/javascript" src="~/js/vanilla/component/modal.js"></script>
    </environment>
    <environment exclude="Development">
        <script type="text/javascript" src="~/js/vanilla/element/list.min.js"></script>
        <script type="text/javascript" src="~/js/vanilla/component/modal.min.js"></script>
    </environment>
}

@section ScriptsFooter
{
    <script type="text/javascript" src="~/js/jquery/jquery-3.4.1.min.js"></script>
    <script type="text/javascript" src="~/js/jquery/unobtrusive-ajax/jquery-unobtrusive-ajax.min.js"></script>
}
