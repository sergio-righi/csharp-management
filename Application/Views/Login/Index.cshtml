@model Application.Models.Login.LoginModel
@{
    ViewBag.Title = Title.Login;

    Layout = "~/Views/Shared/_Login.cshtml";
}

<div id="login_frame" class="login-frame">

    <div class="frame-header">

        <img class="brand" src="~/images/brand.png" />

        @if (!string.IsNullOrWhiteSpace(Model.Photo))
        {
            <img class="photo" src="@Model.Photo" />
        }
        else
        {
            <div class="photo" data-letter="@Model.FirstLetter"></div>
        }

    </div>

    <div class="frame-content">

        <div class="feedback-message">

            @await Html.PartialAsync("~/Views/Shared/Feedback/_Message.cshtml")

        </div>

        @using (Html.BeginForm(null, null, FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Found)
            @Html.HiddenFor(model => model.RedirectUrl)

            <div class="row">

                <div class="col col-12">

                    <div class="form-group">

                        @if (!Model.Found)
                        {
                            @Html.TextBoxFor(model => model.Login, string.Empty, new { @placeholder = Placeholder.EmailOrUser, @required = "required", @autocomplete = "off", @autofocus = "true" })
                        }
                        else
                        {
                            @Html.TextBoxFor(model => model.Login, string.Empty, new { @readonly = "readonly" })

                            <a asp-controller="Login" asp-action="Clean" asp-route-RedirectUrl="@Model.RedirectUrl" class="field-icon c-pointer">

                                <i class="mdi mdi-swap-horizontal"></i>

                            </a>
                        }

                    </div>

                </div>

                @if (Model.Found)
                {
                    <div class="col col-12">

                        <div class="form-group">

                            @Html.PasswordFor(model => model.Password, new { @placeholder = Placeholder.Password, @autofocus = "true", @required = "required" })

                            <span id="caps_lock_icon" class="field-icon d-none">

                                <i class="mdi mdi-caps-lock"></i>

                            </span>

                        </div>

                    </div>

                    <div class="col col-12">

                        <div class="form-group">

                            <div class="checkbox">

                                @Html.CheckBoxFor(model => model.RememberMe, new { @class = "" })

                                @Html.LabelFor(model => model.RememberMe, Label.RememberMe, new { @class = "" })

                            </div>

                        </div>

                    </div>
                }

                <div class="col col-12">

                    <div class="form-group">

                        <button type="submit" class="button button-send button-plain button-stretch" asp-controller="Login" asp-action="Login">

                            @(Model.Found ? Button.Enter : Button.Next)

                        </button>

                    </div>

                </div>

                @if (Model.Found)
                {
                    <div class="col col-12">

                        <button type="submit" class="button button-send button-plain button-text" asp-controller="Login" asp-action="Forgot" formnovalidate="false">

                            @Message.ForgotPassword

                        </button>

                    </div>
                }

            </div>
        }

    </div>

</div>

@section ScriptsFooter
{
    <environment include="Development">
        <script type="text/javascript" src="~/js/vanilla/page/login/login.js"></script>
    </environment>
    <environment exclude="Development">
        <script type="text/javascript" src="~/js/vanilla/page/login/login.min.js"></script>
    </environment>
}